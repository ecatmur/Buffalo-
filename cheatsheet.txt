n I/O register
an transfer register
nnv zero register (DO NOT WRITE)
nanv jump register
annv DEF register (J+L)
nannvv/nanvnv IF registers (acc=0/acc>0)
ananv running flag (0 initially, 1 thereafter)
an(an)^k(v)^k label/data registers

v! * N  // acc+=N [N]
nnvvan. van! v! * N  // acc=N [2 + N]
van! anvan. * N van! // acc-=N (via an) [2 + N]

// IF(p): if p > 0, etc.
    nnvvan. van! vnanvnv!  // nannvv = 0
    nnvvan. van! v! * N vnannvv!  // nanvnv = N
    v$r! v! v$r! $rvan. anvan. van!  // acc = $r
    nannvvv.  // jump to nannvv/nanvnv
    [Â¬p branch padded to K with v!]
    [p branch]

// LABEL(r): stores address in $r (must be anananvv form)
    nnvvan. van! vnannvv! nnvvan. van!  // nannvv = acc = 0
    nannvvv.  // jump to nannvv, jumps directly back leaving succeeding pc in nanv
    nanvvnanv. nanvvnanv. nanvvnanv. nanvvnanv.  // nanv -= 4
    nanvv$r.  // $r = nanv--

// GOTO(r): jumps to $r, without altering it, potentially returning (uses nanv as jump register) [6]
    v$r! v! v$r! $rvnanv. nanvvnanv.  // nanv = $r
    nanvv.

// DEF(r, s): stores address in $r, return address in $s, then jumps forward L if execute flag is not set
    RETURN(s)
    LABEL(r, len(RETURN(s)))
    IF(ananv)
    PAD(GOTO(annv), K)
    [ code ]
// IF(p, q): if p, goto q, returning to after
    IF(p)
    PAD(len(GOTO(q)), nannvvv., K)
    GOTO(q)
// IF(p, q, r): if p, goto q else goto r, returning to after
    IF(p)
    GOTO(r) acc=N nannvvv! nannvvv.  // K = length of this = 6 + 2 + N + 2 = 10 + N = 21
    PAD(GOTO(q), K)

// PROLOG
[0] J+0: jump to nannvv, storing address in nanv (N = 11)
nnvvan. van! vnannvv!
vnanv! nnvvan. van! nanvvnannvv. vnanv! v! vnanv! nannvvv.

[N] J+K: jump to nanvnv + K, storing address in nanv (K = 21)
v! vnanvnv! v! * K
vnanv! nnvvan. van! v! nanvvnanvnv. vnanv! v! van! anvnanv. van! v! v! v! nanvnvv.

[annv] J+L: jump to nanv + L (L >= 3)
vnanv! v! * L vnanv! v! nanvv. v! * L vnanvnv! vannv!

// SUBROUTINES here

// SET RUNNING FLAG
v! vananv!

// PROGRAM BEGIN
